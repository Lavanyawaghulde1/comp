Code:
1.Plus sign at CS1
#include "lpc214x.h" // Include the LPC214x header file for the microcontroller.
#define LCD_PORT 0x00FF0000 // Define a bitmask to manipulate LCD data pins (16-23).
#define EN (1 << 31) // Define a bitmask for the Enable (EN) pin.
#define RS (1 << 27) // Define a bitmask for the Register Select (RS) pin.
#define CS1 (1 << 26) // Define a bitmask for Chip Select 1 (CS1) pin.
#define CS2 (1 << 25) // Define a bitmask for Chip Select 2 (CS2) pin.
#define GRST (1 << 30) // Define a bitmask for the Graphics Reset (GRST) pin.
#define RW (1 << 24) // Define a bitmask for the Read/Write (RW) pin.
#define LCD_SHIFT 16 // Define the number of bits to shift when setting LCD data.
// Function to introduce a small delay
void delay(unsigned int time) {
int i, j;
for (i = 0; i < time; i++)
for (j = 0; j < 10; j++);
}
// Function to introduce a longer delay
void ldelay(unsigned int time) {
int i, j;
for (i = 0; i < time; i++)
for (j = 0; j < 5000; j++);
}
// Function to generate an ENABLE pulse for data latching
void LCD_strobe(void) {
IO1SET = EN; // Set the Enable (EN) pin high.

delay(5); // Delay to keep the EN pin high.
IO1CLR = EN; // Clear the Enable (EN) pin to create a pulse.
delay(5); // Delay after the pulse.
}
// Function to send data to the GLCD
void GLCD_data(unsigned char ch) {
IO1CLR = LCD_PORT; // Clear the data pins.
IO1SET = ch << LCD_SHIFT; // Set the data pins with the given data shifted to the correct
position.
IO1SET = RS; // Set the Register Select (RS) pin to indicate data.
LCD_strobe(); // Call function to latch the data.
}
// Function to send a command to the GLCD
void GLCD_cmd(unsigned char ch) {
IO1CLR = LCD_PORT; // Clear the data pins.
IO1SET = ch << LCD_SHIFT; // Set the data pins with the given command shifted to the
correct position.
IO1CLR = RS; // Clear the Register Select (RS) pin to indicate a command.
LCD_strobe(); // Call function to send the command.
}
// Function to initialize the GLCD
void GLCD_Init() {
int i;
PINSEL0 = 0; // Set pins as GPIO.
PINSEL1 = 0;
PINSEL2 = 0;
IODIR1 = LCD_PORT | RS | EN | CS1 | CS2 | GRST | RW; // Set pins as output.
IOSET1 = GRST | CS1 | CS2; // Set control pins.
IOCLR1 = RW | RS | EN; // Clear other control pins.
for (i = 0; i < 10; i++)
GLCD_cmd(0x3F); // Display ON.
GLCD_cmd(0x40); // Set Y address as 0 (range 0-63).
GLCD_cmd(0xB8); // Set X address as 0 (page address) (range 0-7).
}
// Function to display data on the GLCD
void GLCD_disp(unsigned char *temp1) {
int page, col;
for (page = 0; page < 8; page++) { // Iterate through pages.

IO1SET = CS1; // Select chip CS1.
IO1CLR = CS2; // Deselect chip CS2.
GLCD_cmd(0xB8 | page); // Set the page address.
GLCD_cmd(0x40); // Set the column address.
for (col = 0; col < 64; col++) { // Display CS1 data.
GLCD_data(temp1[(page * 128) + col]);
}
IO1CLR = CS1; // Deselect chip CS1.
IO1SET = CS2; // Select chip CS2.
GLCD_cmd(0xB8 | page); // Set the page address.
GLCD_cmd(0x40); // Set the column address.
for (col = 64; col < 128; col++) { // Display CS2 data.
GLCD_data(temp1[(page * 128) + col]);
}
}
}
// Main function
int main() {
GLCD_Init(); // Initialize the GLCD.
int i, j, l, m;
for (i = 1; i < 7; i++) { // Draw vertical strip.
IO1SET = CS1; // Select chip CS1.
IO1CLR = CS2; // Deselect chip CS2.
GLCD_cmd(0xB8 | i);
for (j = 29; j < 43; j++) {
GLCD_cmd(0x40 | j);
GLCD_data(0x00); // Set pixel to 0x00.
}
}
for (l = 3; l < 5; l++) { // Draw horizontal strip.
GLCD_cmd(0xB8 | l);
for (m = 10; m < 61; m++) {
GLCD_cmd(0x40 | m);
GLCD_data(0x00); // Set pixel to 0x00.
}

}
}

2.Plus sign at the center
#include "lpc214x.h"
// Define constants for GPIO pins and control signals
#define LCD_PORT 0x00FF0000
#define EN (1 << 31)
#define RS (1 << 27)
#define CS1 (1 << 26)
#define CS2 (1 << 25)
#define GRST (1 << 30)
#define RW (1 << 24)
#define LCD_SHIFT 16
// Function to introduce a small delay
void delay(unsigned int time) {
int i, j;
for (i = 0; i < time; i++)
for (j = 0; j < 10; j++);
}

// Function to introduce a longer delay
void ldelay(unsigned int time) {
int i, j;
for (i = 0; i < time; i++)
for (j = 0; j < 5000; j++);
}
// Function to generate an ENABLE pulse for data latching
void LCD_strobe(void) {
IO1SET = EN; // Set the EN (Enable) pin high
delay(5); // Delay to keep EN high
IO1CLR = EN; // Clear the EN (Enable) pin to create a pulse
delay(5); // Delay after the pulse
}
// Function to send data to the GLCD
void GLCD_data(unsigned char ch) {
IO1CLR = LCD_PORT; // Clear the data pins
IO1SET = ch << LCD_SHIFT; // Set the data pins with the given data
IO1SET = RS; // Set RS (Register Select) to indicate data
LCD_strobe(); // Call function to latch the data
}
// Function to send a command to the GLCD
void GLCD_cmd(unsigned char ch) {
IO1CLR = LCD_PORT; // Clear the data pins
IO1SET = ch << LCD_SHIFT; // Set the data pins with the given command
IO1CLR = RS; // Clear RS (Register Select) to indicate a command
LCD_strobe(); // Call function to send the command
}
// Function to initialize the GLCD
void GLCD_Init() {
int i;
PINSEL0 = 0; // Set pins as GPIO
PINSEL1 = 0;
PINSEL2 = 0;
IODIR1 = LCD_PORT | RS | EN | CS1 | CS2 | GRST | RW; // Set pins as output
IOSET1 = GRST | CS1 | CS2; // Set control pins
IOCLR1 = RW | RS | EN; // Clear other control pins
for (i = 0; i < 10; i++)
GLCD_cmd(0x3F); // Display ON
GLCD_cmd(0x40); // Set Y address as 0 (range 0-63)

GLCD_cmd(0xB8); // Set X address as 0 (page address) (range 0-7)
}
// Function to display data on the GLCD
void GLCD_disp(unsigned char *temp1) {
int page, col;
for (page = 0; page < 8; page++) {
IO1SET = CS1; // Select chip CS1
IO1CLR = CS2; // Deselect chip CS2
GLCD_cmd(0xB8 | page); // Set the page address
GLCD_cmd(0x40); // Set the column address
for (col = 0; col < 64; col++) {
GLCD_data(temp1[(page * 128) + col]); // Send data for CS1
}
IO1CLR = CS1; // Deselect chip CS1
IO1SET = CS2; // Select chip CS2
GLCD_cmd(0xB8 | page); // Set the page address
GLCD_cmd(0x40); // Set the column address
for (col = 64; col < 128; col++) {
GLCD_data(temp1[(page * 128) + col]); // Send data for CS2
}
}
}
// Main function
int main() {
GLCD_Init(); // Initialize the GLCD
int i, j, l, m;
// Draw vertical strips on the display
for (i = 1; i < 7; i++) {
IO1SET = CS1; // Select chip CS1
IO1CLR = CS2; // Deselect chip CS2
GLCD_cmd(0xB8 | i);
for (j = 56; j < 64; j++) {
GLCD_cmd(0x40 | j);
GLCD_data(0x00); // Set pixel to 0x00
}
}
// Draw horizontal strips on the display
for (l = 3; l < 5; l++) {
GLCD_cmd(0xB8 | l);
for (m = 37; m < 64; m++) {

GLCD_cmd(0x40 | m);
GLCD_data(0x00); // Set pixel to 0x00
}
}
// Repeat the same process for the other half of the display (CS2)
for (i = 1; i < 7; i++) {
IO1SET = CS2; // Select chip CS2
IO1CLR = CS1; // Deselect chip CS1
GLCD_cmd(0xB8 | i);
for (j = 64; j < 72; j++) {
GLCD_cmd(0x40 | j);
GLCD_data(0x00); // Set pixel to 0x00
}
}
for (l = 3; l < 5; l++) {
GLCD_cmd(0xB8 | l);
for (m = 64; m < 90; m++) {
GLCD_cmd(0x40 | m);
GLCD_data(0x00); // Set pixel to 0x00
}
}
}

3.Equal sign at the center
#include "lpc214x.h"
// Define constants for GPIO pins and control signals
#define LCD_PORT 0x00FF0000
#define EN (1 << 31)
#define RS (1 << 27)
#define CS1 (1 << 26)
#define CS2 (1 << 25)
#define GRST (1 << 30)
#define RW (1 << 24)
#define LCD_SHIFT 16
// Function to introduce a small delay
void delay(unsigned int time) {
int i, j;
for (i = 0; i < time; i++)
for (j = 0; j < 10; j++);
}
// Function to introduce a longer delay
void ldelay(unsigned int time) {
int i, j;
for (i = 0; i < time; i++)
for (j = 0; j < 5000; j++);
}
// Function to generate an ENABLE pulse for data latching
void LCD_strobe(void) {
IO1SET = EN; // Set the EN (Enable) pin high
delay(5); // Delay to keep EN high
IO1CLR = EN; // Clear the EN (Enable) pin to create a pulse
delay(5); // Delay after the pulse
}
// Function to send data to the GLCD
void GLCD_data(unsigned char ch) {
IO1CLR = LCD_PORT; // Clear the data pins
IO1SET = ch << LCD_SHIFT; // Set the data pins with the given data
IO1SET = RS; // Set RS (Register Select) to indicate data
LCD_strobe(); // Call function to latch the data
}

// Function to send a command to the GLCD
void GLCD_cmd(unsigned char ch) {
IO1CLR = LCD_PORT; // Clear the data pins
IO1SET = ch << LCD_SHIFT; // Set the data pins with the given command
IO1CLR = RS; // Clear RS (Register Select) to indicate a command
LCD_strobe(); // Call function to send the command
}
// Function to initialize the GLCD
void GLCD_Init() {
int i;
PINSEL0 = 0; // Set pins as GPIO
PINSEL1 = 0;
PINSEL2 = 0;
IODIR1 = LCD_PORT | RS | EN | CS1 | CS2 | GRST | RW; // Set pins as output
IOSET1 = GRST | CS1 | CS2; // Set control pins
IOCLR1 = RW | RS | EN; // Clear other control pins
for (i = 0; i < 10; i++)
GLCD_cmd(0x3F); // Display ON
GLCD_cmd(0x40); // Set Y address as 0 (range 0-63)
GLCD_cmd(0xB8); // Set X address as 0 (page address) (range 0-7)
}
// Function to display data on the GLCD
void GLCD_disp(unsigned char *temp1) {
int page, col;
for (page = 0; page < 8; page++) {
IO1SET = CS1; // Select chip CS1
IO1CLR = CS2; // Deselect chip CS2
GLCD_cmd(0xB8 | page); // Set the page address
GLCD_cmd(0x40); // Set the column address
for (col = 0; col < 64; col++) {
GLCD_data(temp1[(page * 128) + col]); // Send data for CS1
}
IO1CLR = CS1; // Deselect chip CS1
IO1SET = CS2; // Select chip CS2
GLCD_cmd(0xB8 | page); // Set the page address
GLCD_cmd(0x40); // Set the column address
for (col = 64; col < 128; col++) {
GLCD_data(temp1[(page * 128) + col]); // Send data for CS2
}
}
}

// Main function
int main() {
GLCD_Init(); // Initialize the GLCD
int i, j, l, m;
// Draw vertical strips on the display
for (i = 1; i < 3; i++) {
IO1SET = CS1; // Select chip CS1
IO1CLR = CS2; // Deselect chip CS2
GLCD_cmd(0xB8 | i);
for (j = 34; j < 64; j++) {
GLCD_cmd(0x40 | j);
GLCD_data(0x00); // Set pixel to 0x00
}
}
// Draw horizontal strips on the display
for (l = 5; l < 7; l++) {
GLCD_cmd(0xB8 | l);
for (m = 34; m < 64; m++) {
GLCD_cmd(0x40 | m);
GLCD_data(0x00); // Set pixel to 0x00
}
}
// Repeat the same process for the other half of the display (CS2)
for (i = 1; i < 3; i++) {
IO1SET = CS2; // Select chip CS2
IO1CLR = CS1; // Deselect chip CS1
GLCD_cmd(0xB8 | i);
for (j = 64; j < 72; j++) {
GLCD_cmd(0x40 | j);
GLCD_data(0x00); // Set pixel to 0x00
}
}
for (l = 5; l < 7; l++) {
GLCD_cmd(0xB8 | l);
for (m = 64; m < 72; m++) {
GLCD_cmd(0x40 | m);
GLCD_data(0x00); // Set pixel to 0x00
}
}
}

4.Letter I at CS1
#incIude "Ipc214x.h"
#define LCD PORT 0x00FF0000
#define EN (1 << 10)
#define RS (1 << 25 )
#define CS1 (1 << 26)
#define CS2 (1 << 27)
#define GRST (1 << 24)
#define RW (1 << 11) #define LCD SHIFT 16
void delay(unsigned int time) ( int i, j;
for (i = 0; i < time; i++) for (j = 0; j < 10; j++);
void IdeIay(unsigned int time) { int i, j;
for (i = 0; i < time; i++)
for (j = 0; j < 5000; j++);
void LCD strobe(void) ( IOOSET = EN;
delay(5); IOOCLR = EN;

delay(5);
void GLCD data(unsigned char ch) { IO1CLR = LCD_PORT;
IO1SET = ch << LCD_SHIFT;
IO1SET = RS;
LCD strobe();
void GLCD_cmd(unsigned char ch) { IO1CLR = LCD_PORT;
IO1SET = ch << LCD_SHIFT; IO1CLR = RS;
LCD strobe();
void GLCD_Init() {
int i;
PINSELO = 0;
PINSEL1 = 0;
PINSEL2 = 0;
IODIR1 = LCD_PORT I RS I CS1 I CS2 I GRST; IODIRO = ENIRW;
IOSET1 = GRST I CS1 I CS2; IOCLR1 = RW I RS I EN;
IOCLRO = ENIRW;
for (i = 0; i < 10; i++) GLCD_cmd(0x3F);
GLCD_cmd(0x40);
GLCD_cmd(0xB8); // Set X address as 0 (page address) (range 0-7)
I/ Function to display data on the GLCD void GLCD disp(unsigned char *temp1) (
int page, col;
for (page = 0; page < 8; page++) { IO1SET = CS1; // Select chip CS1 IO1CLR =
CS2; // Deselect chip CS2
GLCD cmd(0xB8 I page); // Set the page address GLCD cmd(0x40); I/ Set the
column address
for (col = 0; col < 64; col++) {
GLCD_data(temp1[(page * 128) + col]); // Send data for CS1
IO1CLR = CS1; // Deselect chip CS1 IO1SET = CS2; // Select chip CS2
GLCD_cmd(0xB8 I page); // Set the page address GLCD_cmd(0x40); I/ Set the
column address for (col = 64; col < 128; col++) {
GLCD_data(temp1[(page * 128) + col]); // Send data for CS2

I/ Main function int main() {
GLCD_Init(); // Initialize the GLCD int i, j, I, m;
for (i = 1; i < 3; i++) {
IO1SET = CS1;
IO1CLR = CS2;
GLCD_cmd(0xB8 I '):
for § = 10; j < 52; j++) {
GLCD_cmd(0x40 I J):
GLCD_data(0x00); Il Set pixel to 0x00
for (I = 3; I < 5; I++) {
GLCD_cmd(0xB8 I !):
for (m = 25; m < 37; m-r+) (
GLCD_cmd(0x40 I m);
GLCD_data(0x00); Il Set pixel to 0x00
for (I = 5; I < 7; I-r+) {
GLCD_cmd(0xB8 I I);
for (m = 10; m < 52; m++) ( GLCD_cmd(0x40 I •):
GLCD data(0x00); Il Set pixel to 0x00
}
} }

5.Image of AC DC
#incIude<Ipc214x.h»
#define LCD_Port 0x00FF0000 #define grest 1<<24
#define RS 1<<25
#define CS1 1<<26
#define CS2 1<<27
#define EN 1<<10
#define RW 1<<11
#define shift 16
unsigned char temp[1024]=
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x60,0xA0,0xE0,0x40,0xA0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xA0,0xE0,0x60,0x60,0xE0,0x80,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0x80,
0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0x40,0xA0,0xE0,0xA0,0x60,
0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0xB0,0xD0,0x48,0x12,0x9D,0x27,
0x15,0x11,0x09,0x06,0x00,0x0F,0x12,0x27,0x5A,0x2E,0x28,0xF8,0x50,0x60,0x80,0x00,
0x00,0xE0,0x80,0xF0,0x28,0xBC,0x8C,0x0B,0x26,0x11,0x01,0x04,0x02,0x00,0x09,0x12,
0x24,0x4F,0x88,0x14,0x68,0xA0,0x40,0xC0,0x00,0x80,0xA0,0x50,0xB0,0x40,0xA0,0x30,
0x40,0xB0,0x60,0xA0,0x80,0x50,0x70,0xA8,0x1C,0xE0,0x3A,0x1D,0x05,0x0B,0x03,0x05,
0x05,0x07,0x02,0x05,0x07,0x05,0x01,0x08,0x03,0x2C,0x52,0x0A,0x34,0x70,0xB0,0x20,
0x80,0x80,0x40,0xA0,0xF0,0x48,0x3C,0x0A,0x52,0x08,0x03,0x0B,0x04,0x02,0x00,0x04,
0x09,0x02,0x07,0x4D,0x96,0x18,0x48,0xB0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xA8,0x1A,0xED,0x5D,0xA3,0x05,0x06,0x03,0x01,0x00,0x00,
0x00,0x70,0xC4,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x01,0x00,0x6B,
0x01,0x42,0x05,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xE8,0x50,0xA0,0x00,0x80,
0x00,0x00,0x80,0x41,0xA0,0x84,0x21,0x52,0x51,0x36,0x0B,0x11,0x00,0x00,0x01,0x01,
0x01,0x01,0x01,0xA0,0xF2,0x8B,0x5E,0x6B,0x7F,0x8E,0xD1,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x38,0x04,0x40,0x50,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x08,
0x01,0x6A,0x07,0x02,0x05,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0x80,0xD0,
0xA0,0x40,0x00,0x00,0x00,0x81,0x02,0xA4,0xC1,0xA2,0xC1,0xBF,0x5E,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFE,0x30,0x00,0x00,0x00,0x00,0x00,0x00,

0x00,0x01,0x5B,0x6A,0x6B,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,
0x00,0xD3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x35,0xFB,0x4D,0xAB,0xCE,
0xB8,0xCC,0x76,0xC9,0xAE,0x76,0x0D,0x45,0x08,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x08,0x13,0x15,0x0F,0x0B,0x5C,0xD7,0xBC,0x45,0xEB,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x05,0x00,0x3E,0xE7,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x7F,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF6,0x3F,0xF9,
0x56,0xB7,0xC4,0x98,0xE8,0x14,0x05,0x0E,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x19,0x7D,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x80,0x40,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE5,0x55,0x2B,0xB7,0x5D,
0x16,0x3F,0x68,0x8F,0xC1,0x44,0xA1,0xB0,0x60,0xB0,0x90,0x20,0x00,0x00,0x00,0x00,
0x00,0x80,0xB0,0x70,0xD6,0xB5,0x4C,0xBA,0x1F,0xF0,0x77,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x7F,0x00,0xF0,0xFF,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF1,0x0E,0xFF,
0x5B,0x26,0xBC,0xB7,0x49,0xB0,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x40,0xA0,0x3A,0x3E,0xB9,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x16,0x42,0x1C,0x0A,0x00,0x1A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,
0x20,0x45,0x10,0x20,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x01,0x00,0x05,0x00,0x01,
0x00,0x00,0x00,0x02,0x41,0x89,0xC5,0x2A,0xAD,0x24,0x05,0x80,0xC0,0xA0,0xF4,0x5C,
0xBD,0x6E,0x69,0xB5,0x5E,0xA9,0x58,0x16,0x95,0x17,0x08,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x17,0x60,0x24,0x13,0x0A,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x20,0x80,
0xE0,0xA5,0xC0,0x80,0x80,0x40,0x80,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x0B,0x05,
0x02,0x01,0x00,0x00,0x01,0x80,0x04,0x0B,0xC3,0xAE,0x44,0xF8,0x30,0x00,0x00,0x00,
0x00,0x00,0x00,0x0E,0x0B,0x34,0x64,0x5A,0xB4,0x48,0x40,0xA0,0x00,0x40,0xA0,0x90,
0xA8,0xE4,0xB8,0x30,0x54,0x68,0xF0,0x40,0xD0,0x00,0x00,0xA0,0xD0,0xA0,0xD0,0x60,
0x6C,0x14,0x12,0x16,0x0C,0x34,0x69,0xB2,0x80,0xC8,0xB0,0x00,0x00,0xA0,0x50,0xA8,
0xC0,0x32,0xD5,0x34,0xD5,0x16,0x89,0xF2,0x39,0x74,0xAE,0xA3,0xB6,0x48,0xD1,0x7C,
0x7E,0x4B,0xAE,0x27,0xD3,0x8C,0x2B,0xA6,0xA8,0xF8,0x54,0xA8,0xD0,0xA0,0x00,0x80,
0x40,0x00,0x40,0x40,0x00,0x00,0x80,0x10,0xA8,0x34,0xD2,0x7D,0x14,0x12,0x09,0x07,
0x02,0x01,0x02,0x03,0x06,0x19,0x12,0x75,0xAA,0x44,0xC0,0xC0,0x20,0x00,0x00,0xA0,
0x50,0xC0,0x50,0xE8,0x6D,0x12,0x0E,0x0D,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x0A,0x05,0x0B,0x0A,0x06,
0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x03,0x04,0x07,0x04,0x03,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x04,0x05,0x02,0x04,
0x02,0x04,0x03,0x05,0x07,0x00,0x05,0x07,0x02,0x05,0x01,0x07,0x02,0x05,0x03,0x05,

0x06,0x05,0x02,0x06,0x01,0x00,0x05,0x06,0x02,0x05,0x05,0x00,0x00,0x07,0x05,0x05,
0x06,0x03,0x05,0x04,0x01,0x03,0x05,0x02,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x0E,0x0A,0x0A,0x0D,
0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

void short delay(int time)
for(int i=0;i<time;i++){ for(int j=0;j<10;j++);
void Iong_deIay(int time)
for(int i=0;i<time;i++){ for(int j=0;j<5000;j++);
void Icd_en() IOSET0=EN;
short_deIay(5); IOCLR0=EN;
short_deIay(5);
void Icd_comm(unsigned char ch)
IOCLR1= LCD_Port ; IOCLR1=RS;
IOSET1=ch<<shift;
Icd en();
void Icd_data(unsigned char ch)
IOCLR1= LCD_Port ; IOSET1=RS;
IOSET1=ch<<shift;
Icd_en();
void gIcd_dispIay(unsigned char ”x){
IOCLR1=RS;
IOSET1=CS1;
IOCLR1=CS2;
for(int i=0;i<=7;i++)( IOSET1=CS1; IOCLR1=CS2;
Icd_comm(0xB8 I ): Icd_comm(0x40);
for(int j=0;j<=63;j++){ Icd data(x[(i”128)+j])
for(int i=0;i<=7;i++){ IOCLR1=CS1; IOSET1=CS2;
Icd_comm(0xB8 I ): Icd_comm(0x40);
for(int j=64;j<=127;j++)(
Icd_data(x[(i*128)+j]);
void gIcd_init() int i;
PINSELO = 0;
PINSEL2 = 0;
IODIR1 = LCD_Port lgrest IRS ICS1 ICS2; IODIRO = ENIRW;
IOCLRO = ENIRW;
IOCLR1=RS; IOSET1=grest lCS1ICS2;

for(i=0;i<10;i++) Icd_comm(0x3F); Icd_comm(0xB8); Icd_comm(0x40);
int main()
gIcd_init(); while(1)(
gIcd_dispIay(temp); Iong_deIay(5000);
